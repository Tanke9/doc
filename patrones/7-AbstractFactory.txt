• Problema:
    ▫ Desea proporcionar una biblioteca de clases de productos
    ▫ Desea revelar sólo sus interfaces, no sus
    implementaciones.
• Contexto:
    ▫ Evitar añadir código a las clases existentes con el fin de
    hacer que encapsule información más general.
• Solución:
    ▫ Proporciona una interfaz para crear familias de objetos
    relacionados o dependientes sin especificar sus clases
    concretas.

PARTICIPANTES DEL PATRON
    • AbstractFactory
        ▫ declara una interfaz para las operaciones que crean
        AbstractProduct
    • ConcreteFactory
        ▫ implementa operaciones para crear Product concretos.
    • AbstractProduct
        ▫ declara una interfaz para un tipo de objetos Product.
    • Product
        ▫ define un producto a ser creado por el ConcreteFactory
        correspondiente; que implementa la interfaz AbstractProduct.
    • Client
        ▫ utiliza las interfaces declaradas por las clases AbstractFactory
        y AbstractProduct.


Ejemplo

from abc import ABCMeta, abstractmethod
*******************************************************************************
class Car(metaclass=ABCMeta):
    def __init__(self):
        self.name = None
        self.maxSpeed = None

    def __str__(self):
        return "name is {:s}, maxSpeed is {:s}".format(self.name, self.maxSpeed)

class SportsCar(Car):
    def __init__(self):
        self.name = "Deportivo"
        self.maxSpeed = "250 km/hr"

class FamilyCar(Car):
    def __init__(self):
        self.name = "Familiar"
        self.maxSpeed = "150 km/hr"
*********************************************************************************
class AbstractFactory(metaclass=ABCMeta):
    def __init__(self):
        self.manufacturer = None //nombre de la fabrica

    def __str__(self):    //equivalente toString de java
        return "manufacturer is {:s}".format(self.manufacturer)

    @abstractmethod
    def createCar(self, carType): pass

    @staticmethod
    def get_factory(factoryName):
        if factoryName == "vw":
            return VWFactory()
        elif factoryName == "mb":
            return MBFactory()

        raise TypeError("Unknown Factory")


class VWFactory(AbstractFactory):
    def __init__(self):
        self.manufacturer = "VW"

    def createCar(self, carType):
        self.car = None
        if carType == "sports":
            self.car =  SportsCar();
        elif carType == "family":
            self.car =  FamilyCar();
        else:
            print("Car type {:s} is not defined".format(carType))
        return self.car

    def doSomething(self):
        print(self.car)

if __name__ == "__main__":
    myFactory = AbstractFactory.get_factory("vw")

    print(myFactory)

    s = myFactory.createCar("sports")
    f = myFactory.createCar("family")

    print(s)
    print(f)
