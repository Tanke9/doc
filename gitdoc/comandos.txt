1. git init  -> crea el repositorio en local que es un directorio .git que contiene todo el historial

2. git status ->para ver que esta en el repo y que no

3. git add [archivos] -> stagin area, preparar lo que sera el commit

4. git add -A ->alista todos los archivos para el commit

5.  gitcommit–m "que es estecommit" -> crea el commit y queda agregado al historial del repo



git commit -am "Nombre del commit"             (Crea un commit agregando todos los archivos sin pasar por el staging area)
git commit -m "Nombre  del commit" --amend     (Sustituye el ultimo commit)

    git log --oneline     (Te muestra el id commit y el titulo del commit)
    git log --decorate     (Te muestra donde se encuentra el head point en el log)
    git log --stat        (Explica el numero de lineas que se cambiaron brevemente)
    git log -p            (Explica el numero de lineas que se cambiaron y te muestra que se cambio en el contenido)
    git shortlog        (Indica que commits a realizado un usuario, mostrando el usuario y el titulo de sus commits)
    git log --graph --oneline --decorate
    git log pretty=format:"%cn hizo un commit %h el dia %cd" (Muestar mensajes perzonalizados de los commits)
    git log -3            (Limitamos el numero de commits)
    git log --after="2016-1-2"
    git log --after="today"
    git log --after="2016-1-2" --before="today" (Commits para localizar por fechas)
    git log --author="Santiago Iván" (commits por autor que cumplan con las letras)
    git log --grep="FOOTER" (Busca los commits que cumplan tal cual esta escrito entre las comillas)
    git log --grep="FOOTER" -i (Busca los commits que cumplan sin importar mayusculas o minusculas)
    git log -- index.html (Busca los commits en un archivo en especifico)
    git log -S"Por contenido" (Buscar los commits con el contenido dentro del archivo)
